{
  "version": 3,
  "sources": ["../../../src/core/delta-renderer.ts"],
  "sourcesContent": ["import * as d3 from 'd3';\nimport { translate } from '../utils/svg-util';\nimport { Renderer } from './renderer';\nimport { INode, IEdge, D3Selection, D3SelectionINode, D3SelectionIEdge } from '../types';\n\n\nexport abstract class DeltaRenderer<V, E> extends Renderer<V, E> {\n  setupNodes(): void {\n    const chart = this.chart.select('.nodes-layer');\n    const oldNodeMap = this.oldNodeMap;\n    const useStableLayout = this.canLeverageStableLayout;\n\n    const _recursiveBuild = (selection: D3Selection, childrenNodes: INode<V>[]) => {\n      if (!childrenNodes) return;\n\n      const nodesGroup = selection.selectAll('.node')\n        .filter(function() {\n          return (this as any).parentNode === selection.node(); // FIXME any?\n        })\n        .data(childrenNodes, (d: INode<V>) => d.id);\n\n      const newNodes = nodesGroup.enter().append('g')\n        .classed('node', true);\n\n      // nodesGroup.exit().remove();\n      nodesGroup.exit().each((d: INode<V>) => (d.state = 'removed'));\n      newNodes.each((d: INode<V>) => (d.state = 'new'));\n      nodesGroup.each((d: INode<V>) => (d.state = 'updated'));\n\n      [newNodes, nodesGroup].forEach(g => {\n        g.each(function(d) {\n          const selection = d3.select(this);\n\n          // Allocate for the node itself\n          if (selection.select('.node-ui').size() === 0) {\n            selection.append('g').classed('node-ui', true);\n          }\n          if (useStableLayout === true && oldNodeMap.has(d.id)) {\n            const oldPosition = oldNodeMap.get(d.id);\n            d.x = oldPosition.x;\n            d.y = oldPosition.y;\n            d.width = oldPosition.width;\n            d.height = oldPosition.height;\n          }\n\n          selection.select('.node-ui').datum(d);\n\n          // Allocate for the node's children\n          if (selection.select('.node-children').size() === 0) {\n            selection.append('g').classed('node-children', true);\n          }\n          _recursiveBuild(selection.select('.node-children'), d.nodes);\n        });\n\n        g.attr('transform', d => translate(d.x, d.y));\n      });\n    };\n    _recursiveBuild(chart, this.graph.nodes);\n\n    this.renderNodesAdded(chart.selectAll('.node-ui').filter((d: INode<V>) => d.state === 'new') as D3SelectionINode<V>);\n    this.renderNodesUpdated(chart.selectAll('.node-ui').filter((d: INode<V>) => d.state === 'updated') as D3SelectionINode<V>);\n    this.renderNodesRemoved(chart.selectAll('.node-ui').filter((d: INode<V>) => d.state === 'removed') as D3SelectionINode<V>);\n  }\n\n  setupEdges(): void {\n    const chart = this.chart;\n    const oldEdgeMap = this.oldEdgeMap;\n    const useStableLayout = this.canLeverageStableLayout;\n\n    const allEdges = this.graph.edges;\n\n    // Test stablization\n    allEdges.forEach(edge => {\n      if (useStableLayout === true && oldEdgeMap.has(edge.id)) {\n        edge.points = oldEdgeMap.get(edge.id).points;\n      }\n    });\n\n    const edgesGroup = chart.selectAll('.edge')\n      .data(allEdges, (d: IEdge<V>) => d.id);\n\n    // Scaffold added/updated/removed\n    const newEdges = edgesGroup.enter().append('g').classed('edge', true);\n\n    edgesGroup.exit().each((d: IEdge<E>) => (d.state = 'removed'));\n    newEdges.each((d: IEdge<E>) => (d.state = 'new'));\n    edgesGroup.each((d: IEdge<E>) => (d.state = 'updated'));\n\n    // Rebind because children point to different reference\n    chart.selectAll('.edge').filter((d: IEdge<E>) => d.state === 'updated').each(function(d) {\n      d3.select(this).selectAll('.edge-path').datum(d);\n    });\n\n    this.renderEdgesAdded(chart.selectAll('.edge').filter((d: IEdge<E>) => d.state === 'new') as D3SelectionIEdge<E>);\n    this.renderEdgesUpdated(chart.selectAll('.edge').filter((d: IEdge<E>) => d.state === 'updated') as D3SelectionIEdge<E>);\n    this.renderEdgesRemoved(chart.selectAll('.edge').filter((d: IEdge<E>) => d.state === 'removed') as D3SelectionIEdge<E>);\n  }\n\n  abstract renderNodesAdded(selection: D3SelectionINode<V>): void;\n  abstract renderNodesUpdated(selection: D3SelectionINode<V>): void;\n  abstract renderNodesRemoved(selection: D3SelectionINode<V>): void;\n\n  abstract renderEdgesAdded(selection: D3SelectionIEdge<E>): void;\n  abstract renderEdgesUpdated(selection: D3SelectionIEdge<E>): void;\n  abstract renderEdgesRemoved(selection: D3SelectionIEdge<E>): void;\n}\n"],
  "mappings": ";AAAA;AAAA;AAAA;AACA;AACA;AAIO,kCAA2C,SAAe;AAAA,EAC/D,aAAmB;AACjB,UAAM,QAAQ,KAAK,MAAM,OAAO;AAChC,UAAM,aAAa,KAAK;AACxB,UAAM,kBAAkB,KAAK;AAE7B,UAAM,kBAAkB,CAAC,WAAwB,kBAA8B;AAC7E,UAAI,CAAC;AAAe;AAEpB,YAAM,aAAa,UAAU,UAAU,SACpC,OAAO,WAAW;AACjB,eAAQ,KAAa,eAAe,UAAU;AAAA,SAE/C,KAAK,eAAe,CAAC,MAAgB,EAAE;AAE1C,YAAM,WAAW,WAAW,QAAQ,OAAO,KACxC,QAAQ,QAAQ;AAGnB,iBAAW,OAAO,KAAK,CAAC,MAAiB,EAAE,QAAQ;AACnD,eAAS,KAAK,CAAC,MAAiB,EAAE,QAAQ;AAC1C,iBAAW,KAAK,CAAC,MAAiB,EAAE,QAAQ;AAE5C,OAAC,UAAU,YAAY,QAAQ,OAAK;AAClC,UAAE,KAAK,SAAS,GAAG;AACjB,gBAAM,aAAY,AAAG,OAAO;AAG5B,cAAI,WAAU,OAAO,YAAY,WAAW,GAAG;AAC7C,uBAAU,OAAO,KAAK,QAAQ,WAAW;AAAA;AAE3C,cAAI,oBAAoB,QAAQ,WAAW,IAAI,EAAE,KAAK;AACpD,kBAAM,cAAc,WAAW,IAAI,EAAE;AACrC,cAAE,IAAI,YAAY;AAClB,cAAE,IAAI,YAAY;AAClB,cAAE,QAAQ,YAAY;AACtB,cAAE,SAAS,YAAY;AAAA;AAGzB,qBAAU,OAAO,YAAY,MAAM;AAGnC,cAAI,WAAU,OAAO,kBAAkB,WAAW,GAAG;AACnD,uBAAU,OAAO,KAAK,QAAQ,iBAAiB;AAAA;AAEjD,0BAAgB,WAAU,OAAO,mBAAmB,EAAE;AAAA;AAGxD,UAAE,KAAK,aAAa,OAAK,UAAU,EAAE,GAAG,EAAE;AAAA;AAAA;AAG9C,oBAAgB,OAAO,KAAK,MAAM;AAElC,SAAK,iBAAiB,MAAM,UAAU,YAAY,OAAO,CAAC,MAAgB,EAAE,UAAU;AACtF,SAAK,mBAAmB,MAAM,UAAU,YAAY,OAAO,CAAC,MAAgB,EAAE,UAAU;AACxF,SAAK,mBAAmB,MAAM,UAAU,YAAY,OAAO,CAAC,MAAgB,EAAE,UAAU;AAAA;AAAA,EAG1F,aAAmB;AACjB,UAAM,QAAQ,KAAK;AACnB,UAAM,aAAa,KAAK;AACxB,UAAM,kBAAkB,KAAK;AAE7B,UAAM,WAAW,KAAK,MAAM;AAG5B,aAAS,QAAQ,UAAQ;AACvB,UAAI,oBAAoB,QAAQ,WAAW,IAAI,KAAK,KAAK;AACvD,aAAK,SAAS,WAAW,IAAI,KAAK,IAAI;AAAA;AAAA;AAI1C,UAAM,aAAa,MAAM,UAAU,SAChC,KAAK,UAAU,CAAC,MAAgB,EAAE;AAGrC,UAAM,WAAW,WAAW,QAAQ,OAAO,KAAK,QAAQ,QAAQ;AAEhE,eAAW,OAAO,KAAK,CAAC,MAAiB,EAAE,QAAQ;AACnD,aAAS,KAAK,CAAC,MAAiB,EAAE,QAAQ;AAC1C,eAAW,KAAK,CAAC,MAAiB,EAAE,QAAQ;AAG5C,UAAM,UAAU,SAAS,OAAO,CAAC,MAAgB,EAAE,UAAU,WAAW,KAAK,SAAS,GAAG;AACvF,MAAG,OAAO,MAAM,UAAU,cAAc,MAAM;AAAA;AAGhD,SAAK,iBAAiB,MAAM,UAAU,SAAS,OAAO,CAAC,MAAgB,EAAE,UAAU;AACnF,SAAK,mBAAmB,MAAM,UAAU,SAAS,OAAO,CAAC,MAAgB,EAAE,UAAU;AACrF,SAAK,mBAAmB,MAAM,UAAU,SAAS,OAAO,CAAC,MAAgB,EAAE,UAAU;AAAA;AAAA;",
  "names": []
}
