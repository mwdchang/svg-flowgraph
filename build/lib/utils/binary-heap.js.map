{
  "version": 3,
  "sources": ["../../../src/utils/binary-heap.ts"],
  "sourcesContent": ["export class BinaryHeap<T> {\n  size: number = 0;\n  maxsize: number = 0;\n  data: Array<any>;\n  scoreFn: (v: T) => number;\n\n  constructor(maxsize: number, scoreFn: (v: T) => number) {\n    this.size = 0;\n    this.maxsize = maxsize;\n    this.data = new Array(this.maxsize + 1);\n    this.scoreFn = scoreFn;\n  }\n\n  getParent(index: number): number {\n    return Math.round(index / 2);\n  }\n\n  getLeftChild(index: number): number{\n    return 2 * index;\n  }\n\n  getRightChild(index: number): number {\n    return 2 * index + 1;\n  }\n\n  isLeaf(index: number): boolean {\n    return index >= this.size / 2 && index <= this.size;\n  }\n\n  swap(indexA: number, indexB: number): void {\n    const tmp = this.data[indexA];\n    this.data[indexA] = this.data[indexB];\n    this.data[indexB] = tmp;\n  }\n\n  heapify(index: number): void {\n    if (this.isLeaf(index)) return;\n    const scoreFn = this.scoreFn;\n    const data = this.data;\n    const e = data[index];\n    const leftChildIndex = this.getLeftChild(index);\n    const rightChildIndex = this.getRightChild(index);\n\n    if (scoreFn(e) > scoreFn(data[leftChildIndex]) || scoreFn(e) > scoreFn(data[rightChildIndex])) {\n      if (scoreFn(data[leftChildIndex]) < scoreFn(data[rightChildIndex])) {\n        this.swap(index, leftChildIndex);\n        this.heapify(this.getLeftChild(index));\n      } else {\n        this.swap(index, rightChildIndex);\n        this.heapify(this.getRightChild(index));\n      }\n    }\n  }\n\n  insert(e: T): void {\n    if (this.size >= this.maxsize) return;\n    const scoreFn = this.scoreFn;\n    this.data[++this.size] = e;\n\n    let currentIndex = this.size;\n    while (scoreFn(this.data[currentIndex]) < scoreFn(this.data[this.getParent(currentIndex)])) {\n      this.swap(currentIndex, this.getParent(currentIndex));\n      currentIndex = this.getParent(currentIndex);\n    }\n  }\n\n  pop(): T {\n    const e = this.data[1];\n    this.data[1] = this.data[this.size - 1];\n    this.size--;\n    this.heapify(1);\n    return e;\n  }\n}\n\n"],
  "mappings": ";AAAO,uBAAoB;AAAA,EAMzB,YAAY,SAAiB,SAA2B;AALxD,gBAAe;AACf,mBAAkB;AAKhB,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,OAAO,IAAI,MAAM,KAAK,UAAU;AACrC,SAAK,UAAU;AAAA;AAAA,EAGjB,UAAU,OAAuB;AAC/B,WAAO,KAAK,MAAM,QAAQ;AAAA;AAAA,EAG5B,aAAa,OAAsB;AACjC,WAAO,IAAI;AAAA;AAAA,EAGb,cAAc,OAAuB;AACnC,WAAO,IAAI,QAAQ;AAAA;AAAA,EAGrB,OAAO,OAAwB;AAC7B,WAAO,SAAS,KAAK,OAAO,KAAK,SAAS,KAAK;AAAA;AAAA,EAGjD,KAAK,QAAgB,QAAsB;AACzC,UAAM,MAAM,KAAK,KAAK;AACtB,SAAK,KAAK,UAAU,KAAK,KAAK;AAC9B,SAAK,KAAK,UAAU;AAAA;AAAA,EAGtB,QAAQ,OAAqB;AAC3B,QAAI,KAAK,OAAO;AAAQ;AACxB,UAAM,UAAU,KAAK;AACrB,UAAM,OAAO,KAAK;AAClB,UAAM,IAAI,KAAK;AACf,UAAM,iBAAiB,KAAK,aAAa;AACzC,UAAM,kBAAkB,KAAK,cAAc;AAE3C,QAAI,QAAQ,KAAK,QAAQ,KAAK,oBAAoB,QAAQ,KAAK,QAAQ,KAAK,mBAAmB;AAC7F,UAAI,QAAQ,KAAK,mBAAmB,QAAQ,KAAK,mBAAmB;AAClE,aAAK,KAAK,OAAO;AACjB,aAAK,QAAQ,KAAK,aAAa;AAAA,aAC1B;AACL,aAAK,KAAK,OAAO;AACjB,aAAK,QAAQ,KAAK,cAAc;AAAA;AAAA;AAAA;AAAA,EAKtC,OAAO,GAAY;AACjB,QAAI,KAAK,QAAQ,KAAK;AAAS;AAC/B,UAAM,UAAU,KAAK;AACrB,SAAK,KAAK,EAAE,KAAK,QAAQ;AAEzB,QAAI,eAAe,KAAK;AACxB,WAAO,QAAQ,KAAK,KAAK,iBAAiB,QAAQ,KAAK,KAAK,KAAK,UAAU,iBAAiB;AAC1F,WAAK,KAAK,cAAc,KAAK,UAAU;AACvC,qBAAe,KAAK,UAAU;AAAA;AAAA;AAAA,EAIlC,MAAS;AACP,UAAM,IAAI,KAAK,KAAK;AACpB,SAAK,KAAK,KAAK,KAAK,KAAK,KAAK,OAAO;AACrC,SAAK;AACL,SAAK,QAAQ;AACb,WAAO;AAAA;AAAA;",
  "names": []
}
